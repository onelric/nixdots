(defwindow menu
    :monitor 0
    :geometry (geometry :x "12px" :y "20px"
                        :width "370px"
                        :anchor "top right")
    :stacking "overlay"
    (menu_widget)
)

(defpoll USERNAME :interval "5s" "whoami")
(defpoll HOST     :interval "5s" "hostname")

(defpoll hour   :interval "1s" "date '+%H'")
(defpoll min    :interval "1s" "date '+%M'")
(defpoll sec    :interval "1s" "date '+%S'")

(defpoll day   :interval "15m" "date '+%d'")
(defpoll month :interval "1h" "date '+%m'")
(defpoll year  :interval "24h" "date '+%Y'")

(defpoll current-volume     :interval "50ms" "pamixer --get-volume")
(defpoll current-brightness :interval "50ms" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}'")
(defpoll current-battery    :interval "30s" "cat /sys/class/power_supply/BAT0/capacity")

(deflisten playerctl-artist :initial "{}" "./scripts/get_song_artist.sh")
(deflisten playerctl-title :initial "{}" "./scripts/get_song_title.sh")

(defpoll playerctl-track-length :interval "1s" "playerctl --player=spotify metadata --format '{{ mpris:length }}' | awk '{print $1 / 1000000}'")
(defpoll playerctl-track-progress :interval "250ms" "playerctl --player=spotify position")

(defpoll playerctl-track-length-label :interval "1s" "playerctl --player=spotify metadata --format '{{ duration(mpris:length) }}'")
(defpoll playerctl-track-progress-label :interval "1s" "playerctl --player=spotify position --format '{{ duration(position) }}'")

(defwidget menu_widget[]
    (revealer :reveal "true" :transition "crossfade" :duration "1s"
    (eventbox :onhoverlost "~/.config/eww/scripts/popup.sh" 
        (box :orientation "v" :class "menu-widget" :space-evenly "false"
            (box
                :class "top-box"
                :orientation "v"

                ; USER & BUTTONS
                (box :class "profile-box" :space-evenly "false"
                    (image :class "profile-picture")

                    (box :class "profile-button-box" :orientation "v"
                        (label :halign "center" :text "${USERNAME} @ ${HOST}" :class "user-name")
                        (box :orientation "h"
                             :spacing 10
                            (button 
                                :class "settings-button"
                                :onclick "sh ~/nixdots/home/elric/pkgs/kitty/sessions/launch_yazi.sh"
                                (label :text "󰥨" :class "settings-button-label"))
                            (button 
                                :class "logout-button"
                                :onclick "sh 'pkill sway'"
                                (label :text "" :class "logout-button-label"))
                            (button 
                                :class "power-button"
                                :onclick "sh ~/nixdots/home/elric/pkgs/kitty/sessions/shutdown.sh"
                                (label :text "⏻" :class "power-button-label"))
                        )
                    )
                )
            )

            ; PLAYERCTL
            ;(expander :expanded "true"
            (box :class "playerctl-box"
                :orientation "v"
                (box :class "playerctl-track-info" 
                    :orientation "h" 
                    :space-evenly "true"

                    (box :orientation "v"
                        (label :text playerctl-artist :class "playerctl-artist-label")
                        (label :text playerctl-title :class "playerctl-track-label")
                    )

                    (box :halign "end" :spacing 7 :valign "center"
                        (button :onclick "playerctl --player=spotify previous" :class "playerctl-button" (label :text "" :class "playerctl-next-previous-label"))
                        (button :onclick "playerctl --player=spotify play-pause" :class "playerctl-button" (label :text "" :class "playerctl-pause-label"))
                        (button :onclick "playerctl --player=spotify next" :class "playerctl-button" (label :text "" :class "playerctl-next-previous-label"))
                    )
                )
                (box :class "player-progress-box" 
                     :space-evenly "false"
                     :orientation "h"
                     :spacing 10
                     (label :text playerctl-track-progress-label :class "playerctl-track-position")
                     (scale 
                        :class "playerctl-slider"
                        :hexpand "true"
                        :min "0" :max "${playerctl-track-length}"
                        :onchange "playerctl --player=spotify position {}"
                        :value playerctl-track-progress)
                     (label :text playerctl-track-length-label :class "playerctl-track-length")
                )
            )
            ;)

            ; VOLUME & BACKLIGHT
            (box
                :class "control-box"
                :valign "start"
                :orientation "h"
                :spacing 12

                (box
                    :class "volume-box"
                    :space-evenly "false"
                    :orientation "v"
                    (label :text "Volume ${current-volume}%" :class "volume-label" :halign "start")
                    (scale 
                        :class "volume-slider"
                        :hexpand "true"
                        :min "0" :max "101"
                        :onchange "pamixer --set-volume {}"
                        :value current-volume)
                )
                (box
                    :class "backlight-box"
                    :space-evenly "false"
                    :orientation "v"
                    (label :text "Brightness ${current-brightness}%" :class "backlight-label" :halign "start")
                    (scale 
                        :class "backlight-slider"
                        :hexpand "true"
                        :min "20" :max "101"
                        :onchange "brightnessctl set {}%"
                        :value current-brightness)
                )
            )

            ; BATTERY
            (box
                :class "battery-box"
                :space-evenly "false"
                :orientation "v"
                (label :text "Battery ${current-battery}%" :class "battery-label" :halign "start")
                (scale 
                    :class "battery-slider"
                    :hexpand "true"
                    :min "0" :max "100"
                    :value current-battery)
            )
        )
    ))
)
